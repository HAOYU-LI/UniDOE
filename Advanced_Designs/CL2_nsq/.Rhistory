pos_list[7] = pos_list[7] + 1
dir_pos_list[7] = dir_pos_list[7] + 1
}
}
}, error=function(e){cat("ERROR :",conditionMessage(e)," file_path : ",file_path,"\n")})
if(row >= BEGIN_ROW){write.csv(dir_pos_list,file = file.path(file_path,"dir_count_result.csv"))}
}
write.csv(pos_list,file = file.path(PATH_TO_DIR,"Count_result.csv"))
dir_lists = list.files(path = PATH_TO_DIR)
total_nq_sets = length(dir_lists)
#Traverse each directory:
for(dir in dir_lists){
# tmp_name = sub("[a-zA-Z]*_* ","",file)
cat("-----------------------------------------------------------------------\n")
cat("At directory ",dir," :\n")
dir_pos_list = c()
for(i in 1:7){
#1:6 represents previous 1~6 columns and 7 represents total count.
dir_pos_list[i] = 0
}
tryCatch({
file_path = file.path(PATH_TO_DIR,dir)
csv_lists = list.files(path = file_path)
csv_length = length(csv_lists)
hash_list = create_hash(csv_lists = csv_lists)
hash_length = length(hash_list)
#Traverse each csv files:
for(index in 2:hash_length){
cat("At csv file ",hash_list[index]," :\n")
csv_path = file.path(file_path,hash_list[index])
cur_design = as.matrix(read.csv(csv_path,header=TRUE))[,c(-1)]
row = nrow(cur_design)
col = ncol(cur_design)
level = max(cur_design) - min(cur_design) + 1
#replace advanced design with manually generated, random design:( For research purpose )
tmp_list = fb2(n=row,s=col,q=level,iter=3)
cur_design =  tmp_list$UniDOE_Matrix
write.csv(cur_design,file = csv_path)
#only interested in large-size designs:
if(row >= BEGIN_ROW && col >=8 )
{
cur_value = Eval(cur_design,crit = CRIT_TYPE)
i = index-1
crit_list = c(cur_value) # cur_value is put into first position
count = 0
#Use all designs with nb. of columns smaller than that of cur_design to do augmentation:
while(i>1 && count<6){
init_path = file.path(file_path,hash_list[i])
init_design = as.matrix(read.csv(init_path,header=TRUE))[,c(-1)]
#use augmented method to find best design, set iters.
prev_list = fb(row,col,level,init_design,iter=3)
crit_list = c(crit_list,prev_list$obj)
#TO be done
i = i-1
count = count + 1
}
write.csv(crit_list,file = file.path(file_path,paste("crit_",hash_list[index],sep="")))
minId = which.min(crit_list)
if(minId != 1)
{
dir_pos_list[minId-1] = dir_pos_list[minId-1] + 1
pos_list[minId-1] = pos_list[minId-1] + 1
cat("cur_value = ",cur_value, "crit_list[minId] = ",crit_list[minId],"dir_pos_list[",minId-1,"]=",dir_pos_list[minId-1]," pos_list[",minId-1,"] = ",pos_list[minId-1],"\n")
}
pos_list[7] = pos_list[7] + 1
dir_pos_list[7] = dir_pos_list[7] + 1
}
}
}, error=function(e){cat("ERROR :",conditionMessage(e)," file_path : ",file_path,"\n")})
if(row >= BEGIN_ROW){write.csv(dir_pos_list,file = file.path(file_path,"dir_count_result.csv"))}
}
warnings
dir_lists = list.files(path = PATH_TO_DIR)
total_nq_sets = length(dir_lists)
#Traverse each directory:
for(dir in dir_lists){
# tmp_name = sub("[a-zA-Z]*_* ","",file)
cat("-----------------------------------------------------------------------\n")
cat("At directory ",dir," :\n")
dir_pos_list = c()
for(i in 1:7){
#1:6 represents previous 1~6 columns and 7 represents total count.
dir_pos_list[i] = 0
}
tryCatch({
file_path = file.path(PATH_TO_DIR,dir)
csv_lists = list.files(path = file_path)
csv_length = length(csv_lists)
hash_list = create_hash(csv_lists = csv_lists)
hash_length = length(hash_list)
#Traverse each csv files:
for(index in 2:hash_length){
cat("At csv file ",hash_list[index]," :\n")
csv_path = file.path(file_path,hash_list[index])
cur_design = as.matrix(read.csv(csv_path,header=TRUE))[,c(-1)]
row = nrow(cur_design)
col = ncol(cur_design)
level = max(cur_design) - min(cur_design) + 1
#replace advanced design with manually generated, random design:( For research purpose )
tmp_list = fb2(n=row,s=col,q=level,iter=3)
cur_design =  tmp_list$UniDOE_Matrix
write.csv(cur_design,file = csv_path)
#only interested in large-size designs:
if(row >= BEGIN_ROW && col >=8 )
{
cur_value = Eval(cur_design,crit = CRIT_TYPE)
i = index-1
crit_list = c(cur_value) # cur_value is put into first position
count = 0
#Use all designs with nb. of columns smaller than that of cur_design to do augmentation:
while(i>1 && count<6){
init_path = file.path(file_path,hash_list[i])
init_design = as.matrix(read.csv(init_path,header=TRUE))[,c(-1)]
#use augmented method to find best design, set iters.
prev_list = fb(row,col,level,init_design,iter=3)
crit_list = c(crit_list,prev_list$obj)
#TO be done
i = i-1
count = count + 1
}
write.csv(crit_list,file = file.path(file_path,paste("crit_",hash_list[index],sep="")))
minId = which.min(crit_list)
if(minId != 1)
{
dir_pos_list[minId-1] = dir_pos_list[minId-1] + 1
pos_list[minId-1] = pos_list[minId-1] + 1
cat("cur_value = ",cur_value, "crit_list[minId] = ",crit_list[minId],"dir_pos_list[",minId-1,"]=",dir_pos_list[minId-1]," pos_list[",minId-1,"] = ",pos_list[minId-1],"\n")
}
pos_list[7] = pos_list[7] + 1
dir_pos_list[7] = dir_pos_list[7] + 1
}
}
}, error=function(e){cat("ERROR :",conditionMessage(e)," file_path : ",file_path,"\n")})
if(row >= BEGIN_ROW){write.csv(dir_pos_list,file = file.path(file_path,"dir_count_result.csv"))}
}
write.csv(pos_list,file = file.path(PATH_TO_DIR,"Count_result.csv"))
dir_lists = list.files(path = PATH_TO_DIR)
total_nq_sets = length(dir_lists)
#Traverse each directory:
for(dir in dir_lists){
# tmp_name = sub("[a-zA-Z]*_* ","",file)
cat("-----------------------------------------------------------------------\n")
cat("At directory ",dir," :\n")
dir_pos_list = c()
for(i in 1:7){
#1:6 represents previous 1~6 columns and 7 represents total count.
dir_pos_list[i] = 0
}
tryCatch({
file_path = file.path(PATH_TO_DIR,dir)
csv_lists = list.files(path = file_path)
csv_length = length(csv_lists)
hash_list = create_hash(csv_lists = csv_lists)
hash_length = length(hash_list)
#Traverse each csv files:
for(index in 2:hash_length){
cat("At csv file ",hash_list[index]," :\n")
csv_path = file.path(file_path,hash_list[index])
cur_design = as.matrix(read.csv(csv_path,header=TRUE))[,c(-1)]
row = nrow(cur_design)
col = ncol(cur_design)
level = max(cur_design) - min(cur_design) + 1
#replace advanced design with manually generated, random design:( For research purpose )
tmp_list = fb2(n=row,s=col,q=level,iter=3)
cur_design =  tmp_list$UniDOE_Matrix
write.csv(cur_design,file = csv_path)
#only interested in large-size designs:
if(row >= BEGIN_ROW && col >=8 )
{
cur_value = Eval(cur_design,crit = CRIT_TYPE)
i = index-1
crit_list = c(cur_value) # cur_value is put into first position
count = 0
#Use all designs with nb. of columns smaller than that of cur_design to do augmentation:
while(i>1 && count<6){
init_path = file.path(file_path,hash_list[i])
init_design = as.matrix(read.csv(init_path,header=TRUE))[,c(-1)]
#use augmented method to find best design, set iters.
prev_list = fb(row,col,level,init_design,iter=3)
crit_list = c(crit_list,prev_list$obj)
#TO be done
i = i-1
count = count + 1
}
write.csv(crit_list,file = file.path(file_path,paste("crit_",hash_list[index],sep="")))
minId = which.min(crit_list)
if(minId != 1)
{
dir_pos_list[minId-1] = dir_pos_list[minId-1] + 1
pos_list[minId-1] = pos_list[minId-1] + 1
cat("cur_value = ",cur_value, "crit_list[minId] = ",crit_list[minId],"dir_pos_list[",minId-1,"]=",dir_pos_list[minId-1]," pos_list[",minId-1,"] = ",pos_list[minId-1],"\n")
}
pos_list[7] = pos_list[7] + 1
dir_pos_list[7] = dir_pos_list[7] + 1
}
}
}, error=function(e){cat("ERROR :",conditionMessage(e)," file_path : ",file_path,"\n")})
if(row >= BEGIN_ROW){write.csv(dir_pos_list,file = file.path(file_path,"dir_count_result.csv"))}
}
write.csv(pos_list,file = file.path(PATH_TO_DIR,"Count_result.csv"))
setwd("I:/Online_design_data/CL2_nsq/Algo/52_s_4")
library(UniDOE)
PATH_TO_FILE = "./Advanced_Designs"
PATH_TO_DIR = "./Algo"
PATH_TO_NEW = "./Improvement"
#######################################Need to be set for different crit################################
CRIT_TYPE = "CL2"
BEGIN_ROW = 27
########################################################################################################
dir.create(file.path(PATH_TO_DIR), showWarnings = TRUE)
dir_lists = list.files(path = PATH_TO_DIR)
total_nq_sets = length(dir_lists)
fb2 <- function(n,s,q,iter)
{
# Find best design with random input in given iteration:
best_list = c()
cur_value = 1e13
maxiter = 300*n
for(i in 1:iter)
{
cur_list = UDC(n=n,s=s,q=q,init = "rand",maxiter=maxiter,crit = CRIT_TYPE)
if(cur_list$obj < cur_value )
{
best_list = cur_list
}
}
return(best_list)
}
SAVE_PATH = "CL2_52_7_4.csv"
n = 52
s = 7
level = 4
tmp_list = fb2(n=row,s=col,q=level,iter=3)
cur_design =  tmp_list$UniDOE_Matrix
write.csv(cur_design,file = SAVE_PATH)
SAVE_PATH = "CL2_52_"+as.character(7)+"_6.csv"
SAVE_PATH = c("CL2_52_",as.character(7),"_6.csv")
SAVE_PATH
SAVE_PATH = cbind("CL2_52_",as.character(7),"_6.csv")
SAVE_PATH
SAVE_PATH = paste(paste("CL2_52_",as.character(7),sep = ""),"_6.csv",sep="")
SAVE_PATH
for(i = 2:5)
{
SAVE_PATH = paste(paste("../54_s_6/CL2_54_",as.character(i),sep = ""),"_6.csv",sep="")
n = 54
s = i
level = 6
tmp_list = fb2(n=row,s=col,q=level,iter=3)
cur_design =  tmp_list$UniDOE_Matrix
write.csv(cur_design,file = SAVE_PATH)
}
SAVE_PATH = "CL2_52_7_4.csv"
n = 52
s = 7
level = 4
tmp_list = fb2(n=n,s=s,q=level,iter=3)
cur_design =  tmp_list$UniDOE_Matrix
write.csv(cur_design,file = SAVE_PATH)
for(i = 2:5)
{
SAVE_PATH = paste(paste("../54_s_6/CL2_54_",as.character(i),sep = ""),"_6.csv",sep="")
n = 54
s = i
level = 6
tmp_list = fb2(n=n,s=s,q=level,iter=3)
cur_design =  tmp_list$UniDOE_Matrix
write.csv(cur_design,file = SAVE_PATH)
}
for(i = 2:5)
{
SAVE_PATH = paste(paste("../54_s_6/CL2_54_",as.character(i),sep = ""),"_6.csv",sep="")
n = 54
s = as.integer(i)
level = 6
tmp_list = fb2(n=n,s=s,q=level,iter=3)
cur_design =  tmp_list$UniDOE_Matrix
write.csv(cur_design,file = SAVE_PATH)
}
SAVE_PATH
s
for(i in 2:5)
{
cat("i = ",i,"\n")
SAVE_PATH = paste(paste("../54_s_6/CL2_54_",as.character(i),sep = ""),"_6.csv",sep="")
n = 54
s = as.integer(i)
level = 6
tmp_list = fb2(n=n,s=s,q=level,iter=3)
cur_design =  tmp_list$UniDOE_Matrix
write.csv(cur_design,file = SAVE_PATH)
}
for(i in 2:4)
{
cat("i = ",i,"\n")
SAVE_PATH = paste(paste("../55_s_5/CL2_55_",as.character(i),sep = ""),"_5.csv",sep="")
n = 55
s = as.integer(i)
level = 5
tmp_list = fb2(n=n,s=s,q=level,iter=3)
cur_design =  tmp_list$UniDOE_Matrix
write.csv(cur_design,file = SAVE_PATH)
}
for(i in 2:5)
{
cat("i = ",i,"\n")
SAVE_PATH = paste(paste("../60_s_6/CL2_60_",as.character(i),sep = ""),"_6.csv",sep="")
n = 60
s = as.integer(i)
level = 6
tmp_list = fb2(n=n,s=s,q=level,iter=3)
cur_design =  tmp_list$UniDOE_Matrix
write.csv(cur_design,file = SAVE_PATH)
}
fb2 <- function(n,s,q,iter)
{
# Find best design with random input in given iteration:
best_list = c()
cur_value = 1e13
maxiter = 1000*n
for(i in 1:iter)
{
cur_list = UDC(n=n,s=s,q=q,init = "rand",maxiter=maxiter,crit = CRIT_TYPE)
if(cur_list$obj < cur_value )
{
best_list = cur_list
}
}
return(best_list)
}
for(i in 13:40)
{
cat("i = ",i,"\n")
SAVE_PATH = paste(paste("../60_s_6/CL2_60_",as.character(i),sep = ""),"_6.csv",sep="")
n = 60
s = as.integer(i)
level = 6
tmp_list = fb2(n=n,s=s,q=level,iter=3)
cur_design =  tmp_list$UniDOE_Matrix
write.csv(cur_design,file = SAVE_PATH)
}
setwd("I:/Online_design_data/CL2_nsq")
PATH_TO_FILE = "./Advanced_Designs"
PATH_TO_DIR = "./Algo"
PATH_TO_NEW = "./Improvement"
#######################################Need to be set for different crit################################
CRIT_TYPE = "CL2"
BEGIN_ROW = 27
########################################################################################################
dir.create(file.path(PATH_TO_DIR), showWarnings = TRUE)
dir_lists = list.files(path = PATH_TO_DIR)
total_nq_sets = length(dir_lists)
dir_lists = list.files(path = PATH_TO_DIR)
total_nq_sets = length(dir_lists)
#Traverse each directory:
for(dir in dir_lists){
# tmp_name = sub("[a-zA-Z]*_* ","",file)
cat("-----------------------------------------------------------------------\n")
cat("At directory ",dir," :\n")
dir_pos_list = c()
for(i in 1:7){
#1:6 represents previous 1~6 columns and 7 represents total count.
dir_pos_list[i] = 0
}
tryCatch({
file_path = file.path(PATH_TO_DIR,dir)
csv_lists = list.files(path = file_path)
csv_length = length(csv_lists)
hash_list = create_hash(csv_lists = csv_lists)
hash_length = length(hash_list)
#Traverse each csv files:
for(index in 2:hash_length){
cat("At csv file ",hash_list[index]," :\n")
csv_path = file.path(file_path,hash_list[index])
cur_design = as.matrix(read.csv(csv_path,header=TRUE))[,c(-1)]
row = nrow(cur_design)
col = ncol(cur_design)
level = max(cur_design) - min(cur_design) + 1
#replace advanced design with manually generated, random design:( For research purpose )
#tmp_list = fb2(n=row,s=col,q=level,iter=3)
#cur_design =  tmp_list$UniDOE_Matrix
#write.csv(cur_design,file = csv_path)
#only interested in large-size designs:
if(row >= BEGIN_ROW && col >=8 )
{
cur_value = Eval(cur_design,crit = CRIT_TYPE)
i = index-1
crit_list = c(cur_value) # cur_value is put into first position
count = 0
#Use all designs with nb. of columns smaller than that of cur_design to do augmentation:
while(i>1 && count<6){
init_path = file.path(file_path,hash_list[i])
init_design = as.matrix(read.csv(init_path,header=TRUE))[,c(-1)]
#use augmented method to find best design, set iters.
prev_list = fb(row,col,level,init_design,iter=3)
crit_list = c(crit_list,prev_list$obj)
#TO be done
i = i-1
count = count + 1
}
write.csv(crit_list,file = file.path(file_path,paste("crit_",hash_list[index],sep="")))
minId = which.min(crit_list)
if(minId != 1)
{
dir_pos_list[minId-1] = dir_pos_list[minId-1] + 1
pos_list[minId-1] = pos_list[minId-1] + 1
cat("cur_value = ",cur_value, "crit_list[minId] = ",crit_list[minId],"dir_pos_list[",minId-1,"]=",dir_pos_list[minId-1]," pos_list[",minId-1,"] = ",pos_list[minId-1],"\n")
}
pos_list[7] = pos_list[7] + 1
dir_pos_list[7] = dir_pos_list[7] + 1
}
}
}, error=function(e){cat("ERROR :",conditionMessage(e)," file_path : ",file_path,"\n")})
if(row >= BEGIN_ROW){write.csv(dir_pos_list,file = file.path(file_path,"dir_count_result.csv"))}
}
fb2 <- function(n,s,q,iter)
{
# Find best design with random input in given iteration:
best_list = c()
cur_value = 1e13
maxiter = 300*n
for(i in 1:iter)
{
cur_list = UDC(n=n,s=s,q=q,init = "rand",maxiter=maxiter,crit = CRIT_TYPE)
if(cur_list$obj < cur_value )
{
best_list = cur_list
}
}
return(best_list)
}
fb2 <- function(n,s,q,iter)
{
# Find best design with random input in given iteration:
best_list = c()
cur_value = 1e13
maxiter = 300*n
for(i in 1:iter)
{
cur_list = UDC(n=n,s=s,q=q,init = "rand",maxiter=maxiter,crit = CRIT_TYPE)
if(cur_list$obj < cur_value )
{
best_list = cur_list
}
}
return(best_list)
}
pos_list[1] =  11
dir_lists = list.files(path = PATH_TO_DIR)
total_nq_sets = length(dir_lists)
#Traverse each directory:
for(dir in dir_lists){
# tmp_name = sub("[a-zA-Z]*_* ","",file)
cat("-----------------------------------------------------------------------\n")
cat("At directory ",dir," :\n")
dir_pos_list = c()
for(i in 1:7){
#1:6 represents previous 1~6 columns and 7 represents total count.
dir_pos_list[i] = 0
}
tryCatch({
file_path = file.path(PATH_TO_DIR,dir)
csv_lists = list.files(path = file_path)
csv_length = length(csv_lists)
hash_list = create_hash(csv_lists = csv_lists)
hash_length = length(hash_list)
#Traverse each csv files:
for(index in 2:hash_length){
cat("At csv file ",hash_list[index]," :\n")
csv_path = file.path(file_path,hash_list[index])
cur_design = as.matrix(read.csv(csv_path,header=TRUE))[,c(-1)]
row = nrow(cur_design)
col = ncol(cur_design)
level = max(cur_design) - min(cur_design) + 1
#replace advanced design with manually generated, random design:( For research purpose )
tmp_list = fb2(n=row,s=col,q=level,iter=3)
cur_design =  tmp_list$UniDOE_Matrix
write.csv(cur_design,file = csv_path)
#only interested in large-size designs:
if(row >= BEGIN_ROW && col >=8 )
{
cur_value = Eval(cur_design,crit = CRIT_TYPE)
i = index-1
crit_list = c(cur_value) # cur_value is put into first position
count = 0
#Use all designs with nb. of columns smaller than that of cur_design to do augmentation:
while(i>1 && count<6){
init_path = file.path(file_path,hash_list[i])
init_design = as.matrix(read.csv(init_path,header=TRUE))[,c(-1)]
#use augmented method to find best design, set iters.
prev_list = fb(row,col,level,init_design,iter=3)
crit_list = c(crit_list,prev_list$obj)
#TO be done
i = i-1
count = count + 1
}
write.csv(crit_list,file = file.path(file_path,paste("crit_",hash_list[index],sep="")))
minId = which.min(crit_list)
if(minId != 1)
{
dir_pos_list[minId-1] = dir_pos_list[minId-1] + 1
pos_list[minId-1] = pos_list[minId-1] + 1
cat("cur_value = ",cur_value, "crit_list[minId] = ",crit_list[minId],"dir_pos_list[",minId-1,"]=",dir_pos_list[minId-1]," pos_list[",minId-1,"] = ",pos_list[minId-1],"\n")
}
pos_list[7] = pos_list[7] + 1
dir_pos_list[7] = dir_pos_list[7] + 1
}
}
}, error=function(e){cat("ERROR :",conditionMessage(e)," file_path : ",file_path,"\n")})
if(row >= BEGIN_ROW){write.csv(dir_pos_list,file = file.path(file_path,"dir_count_result.csv"))}
}
write.csv(pos_list,file = file.path(PATH_TO_DIR,"Count_result.csv"))
